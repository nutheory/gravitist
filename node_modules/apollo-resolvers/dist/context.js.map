{"version":3,"sources":["../src/context.js"],"names":["createExpressContext","data","res","user","models","context","Context","once","dispose","Object","keys","forEach","key"],"mappings":";;;;;;;;;AAAA;;;;;;;;AAEO,IAAMA,sDAAuB,SAAvBA,oBAAuB,CAACC,IAAD,EAAOC,GAAP,EAAe;AACjDD,SAAOA,QAAQ,EAAf;AACAA,OAAKE,IAAL,GAAYF,KAAKE,IAAL,IAAa,IAAzB;AACAF,OAAKG,MAAL,GAAcH,KAAKG,MAAL,IAAe,EAA7B;AACA,MAAMC,UAAU,IAAIC,OAAJ,CAAYL,IAAZ,CAAhB;AACA,MAAIC,GAAJ,EAAS;AACP,0BAAO,OAAOA,IAAIK,IAAX,KAAoB,UAA3B,EAAuC,oFAAvC;AACA;AACAL,QAAIK,IAAJ,CAAS,QAAT,EAAmB;AAAA,aAAMF,WAAWA,QAAQG,OAAnB,GAA6BH,QAAQG,OAAR,EAA7B,GAAiD,IAAvD;AAAA,KAAnB;AACD;AACD,SAAOH,OAAP;AACD,CAXM;;IAaMC,O,WAAAA,O;AACX,mBAAaL,IAAb,EAAmB;AAAA;;AAAA;;AACjBQ,WAAOC,IAAP,CAAYT,IAAZ,EAAkBU,OAAlB,CAA0B,eAAO;AAC/B,YAAKC,GAAL,IAAYX,KAAKW,GAAL,CAAZ;AACD,KAFD;AAGD;;;;8BACU;AACT,UAAMR,SAAS,KAAKA,MAApB;AACA,UAAMD,OAAO,KAAKA,IAAlB;AACA,WAAKC,MAAL,GAAc,IAAd;AACA,WAAKD,IAAL,GAAY,IAAZ;AACA;AACAM,aAAOC,IAAP,CAAYN,MAAZ,EAAoBO,OAApB,CAA4B,UAACC,GAAD;AAAA,eAASR,OAAOQ,GAAP,EAAYJ,OAAZ,GAAsBJ,OAAOQ,GAAP,EAAYJ,OAAZ,EAAtB,GAA8C,IAAvD;AAAA,OAA5B;AACD","file":"context.js","sourcesContent":["import assert from 'assert';\n\nexport const createExpressContext = (data, res) => {\n  data = data || {};\n  data.user = data.user || null;\n  data.models = data.models || {};\n  const context = new Context(data);\n  if (res) {\n    assert(typeof res.once === 'function', 'createExpressContext takes response as second parameter that implements \"res.once\"');\n    // Bind the response finish event to the context disposal method\n    res.once('finish', () => context && context.dispose ? context.dispose() : null);\n  }\n  return context;\n};\n\nexport class Context {\n  constructor (data) {\n    Object.keys(data).forEach(key => {\n      this[key] = data[key]\n    });\n  }\n  dispose () {\n    const models = this.models;\n    const user = this.user;\n    this.models = null;\n    this.user = null;\n    // Call dispose on every attached model that contains a dispose method\n    Object.keys(models).forEach((key) => models[key].dispose ? models[key].dispose() : null);\n  }\n}\n"]}