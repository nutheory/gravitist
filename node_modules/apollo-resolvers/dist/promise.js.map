{"version":3,"sources":["../src/promise.js"],"names":["p","Promise","usePromise","pLib","prototype","resolve","reject","all","then","catch","getPromise"],"mappings":";;;;;;;AAAA;;;;;;AAEA;AACA,IAAIA,IAAIC,OAAR;;AAEA;AACO,IAAMC,kCAAa,SAAbA,UAAa,OAAQ;AAChC,wBAAOC,QAAQA,KAAKC,SAApB,EAA+B,0DAA/B;AACA,wBAAO,CAAC,CAACD,KAAKE,OAAd,EAAuB,oGAAvB;AACA,wBAAO,CAAC,CAACF,KAAKG,MAAd,EAAsB,mGAAtB;AACA,wBAAO,CAAC,CAACH,KAAKI,GAAd,EAAmB,gGAAnB;AACA,wBAAO,CAAC,CAACJ,KAAKC,SAAL,CAAeI,IAAxB,EAA8B,uHAA9B;AACA,wBAAO,CAAC,CAACL,KAAKC,SAAL,CAAeK,KAAxB,EAA+B,wHAA/B;AACAT,MAAIG,IAAJ;AACD,CARM;;AAUP;AACO,IAAMO,kCAAa,SAAbA,UAAa;AAAA,SAAMV,CAAN;AAAA,CAAnB","file":"promise.js","sourcesContent":["import assert from 'assert';\n\n// Expose the Promise constructor so that it can be overwritten by a different lib like Bluebird\nlet p = Promise;\n\n// Allow overload with compliant promise lib\nexport const usePromise = pLib => {\n  assert(pLib && pLib.prototype, 'apollo-errors#usePromise expects a valid Promise library');\n  assert(!!pLib.resolve, 'apollo-errors#usePromise expects a Promise library that implements static method \"Promise.resolve\"');\n  assert(!!pLib.reject, 'apollo-errors#usePromise expects a Promise library that implements static method \"Promise.reject\"');\n  assert(!!pLib.all, 'apollo-errors#usePromise expects a Promise library that implements static method \"Promise.all\"');\n  assert(!!pLib.prototype.then, 'apollo-errors#usePromise expects a Promise library that implements method \"promise.then\" on the constructor prototype');\n  assert(!!pLib.prototype.catch, 'apollo-errors#usePromise expects a Promise library that implements method \"promise.catch\" on the constructor prototype');\n  p = pLib;\n};\n\n// Return the currently selected promise lib\nexport const getPromise = () => p;\n"]}