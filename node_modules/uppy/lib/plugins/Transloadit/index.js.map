{"version":3,"sources":["../../../src/plugins/Transloadit/index.js"],"names":["Translator","require","Plugin","Client","StatusSocket","defaultGetAssemblyOptions","file","options","params","signature","fields","module","exports","uppy","opts","type","id","title","defaultLocale","strings","creatingAssembly","creatingAssemblyFailed","encoding","defaultOptions","waitForEncoding","waitForMetadata","alwaysRunAssembly","importFromUploadURLs","getAssemblyOptions","locale","translator","i18n","translate","bind","prepareUpload","afterUpload","onFileUploadURLAvailable","onRestored","getPersistentData","validateParams","client","sockets","Error","JSON","parse","err","message","auth","key","fileIDs","Promise","all","map","fileID","getFile","promise","resolve","then","assemblyOptions","dedupeAssemblyOptions","list","dedupeMap","Object","create","forEach","stringify","push","keys","createAssembly","uploadID","pluginOptions","log","expectedFiles","length","assembly","state","getPluginState","assemblyList","uploadsAssemblies","concat","assembly_id","setPluginState","assemblies","attachAssemblyMetadata","tlMeta","assembly_url","filename","name","fieldname","meta","tus","endpoint","tus_url","metaFields","uploadUrl","resume","transloadit","newFile","files","setState","emit","connectSocket","catch","info","shouldWait","reserveFiles","reserveFile","addFile","findFile","uploadedFile","hasOwnProperty","uploadURL","tus_upload_url","is_tus_file","size","onFileUploadComplete","assemblyId","getAssembly","onResult","stepName","result","original_id","localId","entry","results","onAssemblyFinished","url","getAssemblyStatus","setData","uploads","emitEventsDiff","prevState","emitMissedEvents","newUploads","filter","newResults","some","prev","newAssemblies","previousAssemblies","oldAssembly","diffAssemblyStatus","next","ok","upload_meta_data_extracted","error","pluginData","savedState","knownUploads","knownResults","loadAssemblies","assemblyIDs","assemblyID","reconnectSockets","restoreState","assembliesById","restored","newState","previousFiles","indexOf","socket","websocket_url","on","assembly_ssl_url","reject","mode","optionsPromise","allOptions","close","finishedAssemblies","getAssemblyFiles","checkAllComplete","onAssemblyError","onImportError","removeListeners","off","install","addPreProcessor","addPostProcessor","uninstall","removePreProcessor","removePostProcessor"],"mappings":"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","file":"index.js","sourcesContent":["const Translator = require('../../core/Translator')\nconst Plugin = require('../../core/Plugin')\nconst Client = require('./Client')\nconst StatusSocket = require('./Socket')\n\nfunction defaultGetAssemblyOptions (file, options) {\n  return {\n    params: options.params,\n    signature: options.signature,\n    fields: options.fields\n  }\n}\n\n/**\n * Upload files to Transloadit using Tus.\n */\nmodule.exports = class Transloadit extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = 'Transloadit'\n    this.title = 'Transloadit'\n\n    const defaultLocale = {\n      strings: {\n        creatingAssembly: 'Preparing upload...',\n        creatingAssemblyFailed: 'Transloadit: Could not create assembly',\n        encoding: 'Encoding...'\n      }\n    }\n\n    const defaultOptions = {\n      waitForEncoding: false,\n      waitForMetadata: false,\n      alwaysRunAssembly: false,\n      importFromUploadURLs: false,\n      signature: null,\n      params: null,\n      fields: {},\n      getAssemblyOptions: defaultGetAssemblyOptions,\n      locale: defaultLocale\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    this.translator = new Translator({ locale: this.locale })\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n    this.afterUpload = this.afterUpload.bind(this)\n    this.onFileUploadURLAvailable = this.onFileUploadURLAvailable.bind(this)\n    this.onRestored = this.onRestored.bind(this)\n    this.getPersistentData = this.getPersistentData.bind(this)\n\n    if (this.opts.params) {\n      this.validateParams(this.opts.params)\n    }\n\n    this.client = new Client()\n    this.sockets = {}\n  }\n\n  validateParams (params) {\n    if (!params) {\n      throw new Error('Transloadit: The `params` option is required.')\n    }\n\n    if (typeof params === 'string') {\n      try {\n        params = JSON.parse(params)\n      } catch (err) {\n        // Tell the user that this is not an Uppy bug!\n        err.message = 'Transloadit: The `params` option is a malformed JSON string: ' +\n          err.message\n        throw err\n      }\n    }\n\n    if (!params.auth || !params.auth.key) {\n      throw new Error('Transloadit: The `params.auth.key` option is required. ' +\n        'You can find your Transloadit API key at https://transloadit.com/accounts/credentials.')\n    }\n  }\n\n  getAssemblyOptions (fileIDs) {\n    const options = this.opts\n    return Promise.all(\n      fileIDs.map((fileID) => {\n        const file = this.uppy.getFile(fileID)\n        const promise = Promise.resolve()\n          .then(() => options.getAssemblyOptions(file, options))\n        return promise.then((assemblyOptions) => {\n          this.validateParams(assemblyOptions.params)\n\n          return {\n            fileIDs: [fileID],\n            options: assemblyOptions\n          }\n        })\n      })\n    )\n  }\n\n  dedupeAssemblyOptions (list) {\n    const dedupeMap = Object.create(null)\n    list.forEach(({ fileIDs, options }) => {\n      const id = JSON.stringify(options)\n      if (dedupeMap[id]) {\n        dedupeMap[id].fileIDs.push(...fileIDs)\n      } else {\n        dedupeMap[id] = {\n          options,\n          fileIDs: [...fileIDs]\n        }\n      }\n    })\n\n    return Object.keys(dedupeMap).map((id) => dedupeMap[id])\n  }\n\n  createAssembly (fileIDs, uploadID, options) {\n    const pluginOptions = this.opts\n\n    this.uppy.log('[Transloadit] create assembly')\n\n    return this.client.createAssembly({\n      params: options.params,\n      fields: options.fields,\n      expectedFiles: fileIDs.length,\n      signature: options.signature\n    }).then((assembly) => {\n      // Store the list of assemblies related to this upload.\n      const state = this.getPluginState()\n      const assemblyList = state.uploadsAssemblies[uploadID]\n      const uploadsAssemblies = Object.assign({}, state.uploadsAssemblies, {\n        [uploadID]: assemblyList.concat([ assembly.assembly_id ])\n      })\n\n      this.setPluginState({\n        assemblies: Object.assign(state.assemblies, {\n          [assembly.assembly_id]: assembly\n        }),\n        uploadsAssemblies\n      })\n\n      function attachAssemblyMetadata (file, assembly) {\n        // Attach meta parameters for the Tus plugin. See:\n        // https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n        // TODO Should this `meta` be moved to a `tus.meta` property instead?\n        const tlMeta = {\n          assembly_url: assembly.assembly_url,\n          filename: file.name,\n          fieldname: 'file'\n        }\n        const meta = Object.assign({}, file.meta, tlMeta)\n        // Add assembly-specific Tus endpoint.\n        const tus = Object.assign({}, file.tus, {\n          endpoint: assembly.tus_url,\n          // Only send assembly metadata to the tus endpoint.\n          metaFields: Object.keys(tlMeta),\n          // Make sure tus doesn't resume a previous upload.\n          uploadUrl: null,\n          // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times\n          // will upload to the same assembly.\n          resume: false\n        })\n        const transloadit = {\n          assembly: assembly.assembly_id\n        }\n\n        const newFile = Object.assign({}, file, { transloadit })\n        // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n        if (!pluginOptions.importFromUploadURLs) {\n          Object.assign(newFile, { meta, tus })\n        }\n        return newFile\n      }\n\n      const files = Object.assign({}, this.uppy.state.files)\n      fileIDs.forEach((id) => {\n        files[id] = attachAssemblyMetadata(files[id], assembly)\n      })\n\n      this.uppy.setState({ files })\n\n      this.uppy.emit('transloadit:assembly-created', assembly, fileIDs)\n\n      return this.connectSocket(assembly)\n        .then(() => assembly)\n    }).then((assembly) => {\n      this.uppy.log('[Transloadit] Created assembly')\n      return assembly\n    }).catch((err) => {\n      this.uppy.info(this.i18n('creatingAssemblyFailed'), 'error', 0)\n\n      // Reject the promise.\n      throw err\n    })\n  }\n\n  shouldWait () {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the assembly.\n   */\n  reserveFiles (assembly, fileIDs) {\n    return Promise.all(fileIDs.map((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      return this.client.reserveFile(assembly, file)\n    }))\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the assembly\n   * once they have been fully uploaded.\n   */\n  onFileUploadURLAvailable (fileID) {\n    const file = this.uppy.getFile(fileID)\n    if (!file || !file.transloadit || !file.transloadit.assembly) {\n      return\n    }\n\n    const state = this.getPluginState()\n    const assembly = state.assemblies[file.transloadit.assembly]\n\n    this.client.addFile(assembly, file).catch((err) => {\n      this.uppy.log(err)\n      this.uppy.emit('transloadit:import-error', assembly, file.id, err)\n    })\n  }\n\n  findFile (uploadedFile) {\n    const files = this.uppy.state.files\n    for (const id in files) {\n      if (!files.hasOwnProperty(id)) {\n        continue\n      }\n      // Completed file upload.\n      if (files[id].uploadURL === uploadedFile.tus_upload_url) {\n        return files[id]\n      }\n      // In-progress file upload.\n      if (files[id].tus && files[id].tus.uploadUrl === uploadedFile.tus_upload_url) {\n        return files[id]\n      }\n      if (!uploadedFile.is_tus_file) {\n        // Fingers-crossed check for non-tus uploads, eg imported from S3.\n        if (files[id].name === uploadedFile.name && files[id].size === uploadedFile.size) {\n          return files[id]\n        }\n      }\n    }\n  }\n\n  onFileUploadComplete (assemblyId, uploadedFile) {\n    const state = this.getPluginState()\n    const file = this.findFile(uploadedFile)\n    this.setPluginState({\n      files: Object.assign({}, state.files, {\n        [uploadedFile.id]: {\n          assembly: assemblyId,\n          id: file.id,\n          uploadedFile\n        }\n      })\n    })\n    this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId))\n  }\n\n  onResult (assemblyId, stepName, result) {\n    const state = this.getPluginState()\n    const file = state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null\n\n    const entry = {\n      result,\n      stepName,\n      id: result.id,\n      assembly: assemblyId\n    }\n\n    this.setPluginState({\n      results: [...state.results, entry]\n    })\n    this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId))\n  }\n\n  onAssemblyFinished (url) {\n    this.client.getAssemblyStatus(url).then((assembly) => {\n      const state = this.getPluginState()\n      this.setPluginState({\n        assemblies: Object.assign({}, state.assemblies, {\n          [assembly.assembly_id]: assembly\n        })\n      })\n      this.uppy.emit('transloadit:complete', assembly)\n    })\n  }\n\n  getPersistentData (setData) {\n    const state = this.getPluginState()\n    const assemblies = state.assemblies\n    const uploadsAssemblies = state.uploadsAssemblies\n    const uploads = Object.keys(state.files)\n    const results = state.results.map((result) => result.id)\n\n    setData({\n      [this.id]: {\n        assemblies,\n        uploadsAssemblies,\n        uploads,\n        results\n      }\n    })\n  }\n\n  /**\n   * Emit the necessary events that must have occured to get from the `prevState`,\n   * to the current state.\n   * For completed uploads, `transloadit:upload` is emitted.\n   * For new results, `transloadit:result` is emitted.\n   * For completed or errored assemblies, `transloadit:complete` or `transloadit:assembly-error` is emitted.\n   */\n  emitEventsDiff (prevState) {\n    const opts = this.opts\n    const state = this.getPluginState()\n\n    const emitMissedEvents = () => {\n      // Emit events for completed uploads and completed results\n      // that we've missed while we were away.\n      const newUploads = Object.keys(state.files).filter((fileID) => {\n        return !prevState.files.hasOwnProperty(fileID)\n      }).map((fileID) => state.files[fileID])\n      const newResults = state.results.filter((result) => {\n        return !prevState.results.some((prev) => prev.id === result.id)\n      })\n\n      this.uppy.log('[Transloadit] New fully uploaded files since restore:')\n      this.uppy.log(newUploads)\n      newUploads.forEach(({ assembly, uploadedFile }) => {\n        this.uppy.log(`[Transloadit]  emitting transloadit:upload ${uploadedFile.id}`)\n        this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assembly))\n      })\n      this.uppy.log('[Transloadit] New results since restore:')\n      this.uppy.log(newResults)\n      newResults.forEach(({ assembly, stepName, result, id }) => {\n        this.uppy.log(`[Transloadit]  emitting transloadit:result ${stepName}, ${id}`)\n        this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assembly))\n      })\n\n      const newAssemblies = state.assemblies\n      const previousAssemblies = prevState.assemblies\n      this.uppy.log('[Transloadit] Current assembly status after restore')\n      this.uppy.log(newAssemblies)\n      this.uppy.log('[Transloadit] Assembly status before restore')\n      this.uppy.log(previousAssemblies)\n      Object.keys(newAssemblies).forEach((assemblyId) => {\n        const oldAssembly = previousAssemblies[assemblyId]\n        diffAssemblyStatus(oldAssembly, newAssemblies[assemblyId])\n      })\n    }\n\n    // Emit events for assemblies that have completed or errored while we were away.\n    const diffAssemblyStatus = (prev, next) => {\n      this.uppy.log('[Transloadit] Diff assemblies')\n      this.uppy.log(prev)\n      this.uppy.log(next)\n\n      if (opts.waitForEncoding && next.ok === 'ASSEMBLY_COMPLETED' && prev.ok !== 'ASSEMBLY_COMPLETED') {\n        this.uppy.log(`[Transloadit]  Emitting transloadit:complete for ${next.assembly_id}`)\n        this.uppy.log(next)\n        this.uppy.emit('transloadit:complete', next)\n      } else if (opts.waitForMetadata && next.upload_meta_data_extracted && !prev.upload_meta_data_extracted) {\n        this.uppy.log(`[Transloadit]  Emitting transloadit:complete after metadata extraction for ${next.assembly_id}`)\n        this.uppy.log(next)\n        this.uppy.emit('transloadit:complete', next)\n      }\n\n      if (next.error && !prev.error) {\n        this.uppy.log(`[Transloadit]  !!! Emitting transloadit:assembly-error for ${next.assembly_id}`)\n        this.uppy.log(next)\n        this.uppy.emit('transloadit:assembly-error', next, new Error(next.message))\n      }\n    }\n\n    emitMissedEvents()\n  }\n\n  onRestored (pluginData) {\n    const savedState = pluginData && pluginData[this.id] ? pluginData[this.id] : {}\n    const knownUploads = savedState.files || []\n    const knownResults = savedState.results || []\n    const previousAssemblies = savedState.assemblies || {}\n    const uploadsAssemblies = savedState.uploadsAssemblies || {}\n\n    if (Object.keys(uploadsAssemblies).length === 0) {\n      // Nothing to restore.\n      return\n    }\n\n    // Fetch up-to-date assembly statuses.\n    const loadAssemblies = () => {\n      const assemblyIDs = []\n      Object.keys(uploadsAssemblies).forEach((uploadID) => {\n        assemblyIDs.push(...uploadsAssemblies[uploadID])\n      })\n\n      return Promise.all(\n        assemblyIDs.map((assemblyID) => {\n          const url = `https://api2.transloadit.com/assemblies/${assemblyID}`\n          return this.client.getAssemblyStatus(url)\n        })\n      )\n    }\n\n    const reconnectSockets = (assemblies) => {\n      return Promise.all(assemblies.map((assembly) => {\n        // No need to connect to the socket if the assembly has completed by now.\n        if (assembly.ok === 'ASSEMBLY_COMPLETE') {\n          return null\n        }\n        return this.connectSocket(assembly)\n      }))\n    }\n\n    // Convert loaded assembly statuses to a Transloadit plugin state object.\n    const restoreState = (assemblies) => {\n      const assembliesById = {}\n      const files = {}\n      const results = []\n      assemblies.forEach((assembly) => {\n        assembliesById[assembly.assembly_id] = assembly\n\n        assembly.uploads.forEach((uploadedFile) => {\n          const file = this.findFile(uploadedFile)\n          files[uploadedFile.id] = {\n            id: file.id,\n            assembly: assembly.assembly_id,\n            uploadedFile\n          }\n        })\n\n        const state = this.getPluginState()\n        Object.keys(assembly.results).forEach((stepName) => {\n          assembly.results[stepName].forEach((result) => {\n            const file = state.files[result.original_id]\n            result.localId = file ? file.id : null\n            results.push({\n              id: result.id,\n              result,\n              stepName,\n              assembly: assembly.assembly_id\n            })\n          })\n        })\n      })\n\n      this.setPluginState({\n        assemblies: assembliesById,\n        files: files,\n        results: results,\n        uploadsAssemblies: uploadsAssemblies\n      })\n    }\n\n    // Restore all assembly state.\n    this.restored = Promise.resolve()\n      .then(loadAssemblies)\n      .then((assemblies) => {\n        restoreState(assemblies)\n        return reconnectSockets(assemblies)\n      })\n      .then(() => {\n        // Return a callback that will be called by `afterUpload`\n        // once it has attached event listeners etc.\n        const newState = this.getPluginState()\n        const previousFiles = {}\n        knownUploads.forEach((id) => {\n          previousFiles[id] = newState.files[id]\n        })\n        return () => this.emitEventsDiff({\n          assemblies: previousAssemblies,\n          files: previousFiles,\n          results: newState.results.filter(({ id }) => knownResults.indexOf(id) !== -1),\n          uploadsAssemblies\n        })\n      })\n\n    this.restored.then(() => {\n      this.restored = null\n    })\n  }\n\n  connectSocket (assembly) {\n    const socket = new StatusSocket(\n      assembly.websocket_url,\n      assembly\n    )\n    this.sockets[assembly.assembly_id] = socket\n\n    socket.on('upload', this.onFileUploadComplete.bind(this, assembly.assembly_id))\n    socket.on('error', (error) => {\n      this.uppy.emit('transloadit:assembly-error', assembly, error)\n    })\n\n    if (this.opts.waitForEncoding) {\n      socket.on('result', this.onResult.bind(this, assembly.assembly_id))\n    }\n\n    if (this.opts.waitForEncoding) {\n      socket.on('finished', () => {\n        this.onAssemblyFinished(assembly.assembly_ssl_url)\n      })\n    } else if (this.opts.waitForMetadata) {\n      socket.on('metadata', () => {\n        this.onAssemblyFinished(assembly.assembly_ssl_url)\n      })\n    }\n\n    return new Promise((resolve, reject) => {\n      socket.on('connect', resolve)\n      socket.on('error', reject)\n    }).then(() => {\n      this.uppy.log('[Transloadit] Socket is ready')\n    })\n  }\n\n  prepareUpload (fileIDs, uploadID) {\n    // Only use files without errors\n    fileIDs = fileIDs.filter((file) => !file.error)\n\n    fileIDs.forEach((fileID) => {\n      this.uppy.emit('preprocess-progress', fileID, {\n        mode: 'indeterminate',\n        message: this.i18n('creatingAssembly')\n      })\n    })\n\n    const createAssembly = ({ fileIDs, options }) => {\n      return this.createAssembly(fileIDs, uploadID, options).then((assembly) => {\n        if (this.opts.importFromUploadURLs) {\n          return this.reserveFiles(assembly, fileIDs)\n        }\n      }).then(() => {\n        fileIDs.forEach((fileID) => {\n          this.uppy.emit('preprocess-complete', fileID)\n        })\n      })\n    }\n\n    const state = this.getPluginState()\n    const uploadsAssemblies = Object.assign({},\n      state.uploadsAssemblies,\n      { [uploadID]: [] })\n    this.setPluginState({ uploadsAssemblies })\n\n    let optionsPromise\n    if (fileIDs.length > 0) {\n      optionsPromise = this.getAssemblyOptions(fileIDs)\n        .then((allOptions) => this.dedupeAssemblyOptions(allOptions))\n    } else if (this.opts.alwaysRunAssembly) {\n      optionsPromise = Promise.resolve(\n        this.opts.getAssemblyOptions(null, this.opts)\n      ).then((options) => {\n        this.validateParams(options.params)\n        return [\n          { fileIDs, options }\n        ]\n      })\n    } else {\n      // If there are no files and we do not `alwaysRunAssembly`,\n      // don't do anything.\n      return Promise.resolve()\n    }\n\n    return optionsPromise.then((assemblies) => Promise.all(\n      assemblies.map(createAssembly)\n    ))\n  }\n\n  afterUpload (fileIDs, uploadID) {\n    // Only use files without errors\n    fileIDs = fileIDs.filter((file) => !file.error)\n\n    const state = this.getPluginState()\n\n    // If we're still restoring state, wait for that to be done.\n    if (this.restored) {\n      return this.restored.then((emitMissedEvents) => {\n        const promise = this.afterUpload(fileIDs, uploadID)\n        emitMissedEvents()\n        return promise\n      })\n    }\n\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n\n    // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n    if (!this.shouldWait()) {\n      assemblyIDs.forEach((assemblyID) => {\n        const socket = this.sockets[assemblyID]\n        socket.close()\n      })\n      return Promise.resolve()\n    }\n\n    // If no assemblies were created for this upload, we also do not have to wait.\n    // There's also no sockets or anything to close, so just return immediately.\n    if (assemblyIDs.length === 0) {\n      return Promise.resolve()\n    }\n\n    let finishedAssemblies = 0\n\n    return new Promise((resolve, reject) => {\n      fileIDs.forEach((fileID) => {\n        this.uppy.emit('postprocess-progress', fileID, {\n          mode: 'indeterminate',\n          message: this.i18n('encoding')\n        })\n      })\n\n      const onAssemblyFinished = (assembly) => {\n        // An assembly for a different upload just finished. We can ignore it.\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          this.uppy.log(`[Transloadit] afterUpload(): Ignoring finished assembly ${assembly.assembly_id}`)\n          return\n        }\n        this.uppy.log(`[Transloadit] afterUpload(): Got assembly finish ${assembly.assembly_id}`)\n\n        // TODO set the `file.uploadURL` to a result?\n        // We will probably need an option here so the plugin user can tell us\n        // which result to pick…?\n\n        const files = this.getAssemblyFiles(assembly.assembly_id)\n        files.forEach((file) => {\n          this.uppy.emit('postprocess-complete', file.id)\n        })\n\n        checkAllComplete()\n      }\n\n      const onAssemblyError = (assembly, error) => {\n        // An assembly for a different upload just errored. We can ignore it.\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          this.uppy.log(`[Transloadit] afterUpload(): Ignoring errored assembly ${assembly.assembly_id}`)\n          return\n        }\n        this.uppy.log(`[Transloadit] afterUpload(): Got assembly error ${assembly.assembly_id}`)\n        this.uppy.log(error)\n\n        // Clear postprocessing state for all our files.\n        const files = this.getAssemblyFiles(assembly.assembly_id)\n        files.forEach((file) => {\n          // TODO Maybe make a postprocess-error event here?\n          this.uppy.emit('upload-error', file.id, error)\n\n          this.uppy.emit('postprocess-complete', file.id)\n        })\n\n        checkAllComplete()\n      }\n\n      const onImportError = (assembly, fileID, error) => {\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          return\n        }\n\n        // Not sure if we should be doing something when it's just one file failing.\n        // ATM, the only options are 1) ignoring or 2) failing the entire upload.\n        // I think failing the upload is better than silently ignoring.\n        // In the future we should maybe have a way to resolve uploads with some failures,\n        // like returning an object with `{ successful, failed }` uploads.\n        onAssemblyError(assembly, error)\n      }\n\n      const checkAllComplete = () => {\n        finishedAssemblies += 1\n        if (finishedAssemblies === assemblyIDs.length) {\n          // We're done, these listeners can be removed\n          removeListeners()\n          resolve()\n        }\n      }\n\n      const removeListeners = () => {\n        this.uppy.off('transloadit:complete', onAssemblyFinished)\n        this.uppy.off('transloadit:assembly-error', onAssemblyError)\n        this.uppy.off('transloadit:import-error', onImportError)\n      }\n\n      this.uppy.on('transloadit:complete', onAssemblyFinished)\n      this.uppy.on('transloadit:assembly-error', onAssemblyError)\n      this.uppy.on('transloadit:import-error', onImportError)\n    }).then(() => {\n      // Clean up uploadID → assemblyIDs, they're no longer going to be used anywhere.\n      const state = this.getPluginState()\n      const uploadsAssemblies = Object.assign({}, state.uploadsAssemblies)\n      delete uploadsAssemblies[uploadID]\n      this.setPluginState({ uploadsAssemblies })\n    })\n  }\n\n  install () {\n    this.uppy.addPreProcessor(this.prepareUpload)\n    this.uppy.addPostProcessor(this.afterUpload)\n\n    if (this.opts.importFromUploadURLs) {\n      this.uppy.on('upload-success', this.onFileUploadURLAvailable)\n    }\n\n    this.uppy.on('restore:get-data', this.getPersistentData)\n    this.uppy.on('restored', this.onRestored)\n\n    this.setPluginState({\n      // Contains assembly status objects, indexed by their ID.\n      assemblies: {},\n      // Contains arrays of assembly IDs, indexed by the upload ID that they belong to.\n      uploadsAssemblies: {},\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: []\n    })\n  }\n\n  uninstall () {\n    this.uppy.removePreProcessor(this.prepareUpload)\n    this.uppy.removePostProcessor(this.afterUpload)\n\n    if (this.opts.importFromUploadURLs) {\n      this.uppy.off('upload-success', this.onFileUploadURLAvailable)\n    }\n  }\n\n  getAssembly (id) {\n    const state = this.getPluginState()\n    return state.assemblies[id]\n  }\n\n  getAssemblyFiles (assemblyID) {\n    const fileIDs = Object.keys(this.uppy.state.files)\n    return fileIDs.map((fileID) => {\n      return this.uppy.getFile(fileID)\n    }).filter((file) => {\n      return file && file.transloadit && file.transloadit.assembly === assemblyID\n    })\n  }\n}\n"]}