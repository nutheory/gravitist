{"version":3,"sources":["../../src/plugins/XHRUpload.js"],"names":["Plugin","require","cuid","Translator","UppySocket","emitSocketProgress","getSocketHost","settle","limitPromises","module","exports","uppy","opts","type","id","title","defaultLocale","strings","timedOut","defaultOptions","formData","fieldName","method","metaFields","responseUrlFieldName","bundle","headers","locale","timeout","limit","getResponseData","xhr","JSON","parse","response","getResponseError","Error","translator","i18n","translate","bind","handleUpload","limitUploads","fn","getOptions","file","state","xhrUpload","createFormDataUpload","formPost","FormData","Array","isArray","Object","keys","meta","forEach","item","append","data","createBareUpload","upload","current","total","log","resolve","reject","onTimedOut","abort","error","seconds","Math","ceil","emit","aliveTimer","isAlive","clearTimeout","setTimeout","XMLHttpRequest","addEventListener","ev","loaded","lengthComputable","uploader","bytesUploaded","bytesTotal","target","status","resp","uploadURL","name","request","open","toUpperCase","endpoint","header","setRequestHeader","send","on","fileID","uploadRemote","fields","fetch","remote","url","credentials","body","stringify","size","fieldname","then","res","statusText","json","token","host","socket","progressData","close","errData","uploadFiles","files","actions","map","i","parseInt","length","Promise","isRemote","promises","action","limitedAction","fileIDs","getFile","install","addUploader","uninstall","removeUploader"],"mappings":"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","file":"XHRUpload.js","sourcesContent":["const Plugin = require('../core/Plugin')\nconst cuid = require('cuid')\nconst Translator = require('../core/Translator')\nconst UppySocket = require('../core/UppySocket')\nconst {\n  emitSocketProgress,\n  getSocketHost,\n  settle,\n  limitPromises\n} = require('../core/Utils')\n\nmodule.exports = class XHRUpload extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = 'XHRUpload'\n    this.title = 'XHRUpload'\n\n    const defaultLocale = {\n      strings: {\n        timedOut: 'Upload stalled for %{seconds} seconds, aborting.'\n      }\n    }\n\n    // Default options\n    const defaultOptions = {\n      formData: true,\n      fieldName: 'files[]',\n      method: 'post',\n      metaFields: null,\n      responseUrlFieldName: 'url',\n      bundle: true,\n      headers: {},\n      locale: defaultLocale,\n      timeout: 30 * 1000,\n      limit: 0,\n      getResponseData (xhr) {\n        return JSON.parse(xhr.response)\n      },\n      getResponseError (xhr) {\n        return new Error('Upload error')\n      }\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    // i18n\n    this.translator = new Translator({ locale: this.locale })\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.handleUpload = this.handleUpload.bind(this)\n\n    // Simultaneous upload limiting is shared across all uploads with this plugin.\n    if (typeof this.opts.limit === 'number' && this.opts.limit !== 0) {\n      this.limitUploads = limitPromises(this.opts.limit)\n    } else {\n      this.limitUploads = (fn) => fn\n    }\n  }\n\n  getOptions (file) {\n    const opts = Object.assign({},\n      this.opts,\n      this.uppy.state.xhrUpload || {},\n      file.xhrUpload || {}\n    )\n    opts.headers = {}\n    Object.assign(opts.headers, this.opts.headers)\n    if (this.uppy.state.xhrUpload) {\n      Object.assign(opts.headers, this.uppy.state.xhrUpload.headers)\n    }\n    if (file.xhrUpload) {\n      Object.assign(opts.headers, file.xhrUpload.headers)\n    }\n\n    return opts\n  }\n\n  createFormDataUpload (file, opts) {\n    const formPost = new FormData()\n\n    const metaFields = Array.isArray(opts.metaFields)\n      ? opts.metaFields\n      // Send along all fields by default.\n      : Object.keys(file.meta)\n    metaFields.forEach((item) => {\n      formPost.append(item, file.meta[item])\n    })\n\n    formPost.append(opts.fieldName, file.data)\n\n    return formPost\n  }\n\n  createBareUpload (file, opts) {\n    return file.data\n  }\n\n  upload (file, current, total) {\n    const opts = this.getOptions(file)\n\n    this.uppy.log(`uploading ${current} of ${total}`)\n    return new Promise((resolve, reject) => {\n      const data = opts.formData\n        ? this.createFormDataUpload(file, opts)\n        : this.createBareUpload(file, opts)\n\n      const onTimedOut = () => {\n        xhr.abort()\n        this.uppy.log(`[XHRUpload] ${id} timed out`)\n        const error = new Error(this.i18n('timedOut', { seconds: Math.ceil(opts.timeout / 1000) }))\n        this.uppy.emit('upload-error', file.id, error)\n        reject(error)\n      }\n      let aliveTimer\n      const isAlive = () => {\n        clearTimeout(aliveTimer)\n        aliveTimer = setTimeout(onTimedOut, opts.timeout)\n      }\n\n      const xhr = new XMLHttpRequest()\n      const id = cuid()\n\n      xhr.upload.addEventListener('loadstart', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} started`)\n        if (opts.timeout > 0) {\n          // Begin checking for timeouts when loading starts.\n          isAlive()\n        }\n      })\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} progress: ${ev.loaded} / ${ev.total}`)\n        if (opts.timeout > 0) {\n          isAlive()\n        }\n\n        if (ev.lengthComputable) {\n          this.uppy.emit('upload-progress', {\n            uploader: this,\n            id: file.id,\n            bytesUploaded: ev.loaded,\n            bytesTotal: ev.total\n          })\n        }\n      })\n\n      xhr.addEventListener('load', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} finished`)\n        clearTimeout(aliveTimer)\n\n        if (ev.target.status >= 200 && ev.target.status < 300) {\n          const resp = opts.getResponseData(xhr)\n          const uploadURL = resp[opts.responseUrlFieldName]\n\n          this.uppy.emit('upload-success', file.id, resp, uploadURL)\n\n          if (uploadURL) {\n            this.uppy.log(`Download ${file.name} from ${file.uploadURL}`)\n          }\n\n          return resolve(file)\n        } else {\n          const error = opts.getResponseError(xhr) || new Error('Upload error')\n          error.request = xhr\n          this.uppy.emit('upload-error', file.id, error)\n          return reject(error)\n        }\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} errored`)\n        clearTimeout(aliveTimer)\n\n        const error = opts.getResponseError(xhr) || new Error('Upload error')\n        this.uppy.emit('upload-error', file.id, error)\n        return reject(error)\n      })\n\n      xhr.open(opts.method.toUpperCase(), opts.endpoint, true)\n\n      Object.keys(opts.headers).forEach((header) => {\n        xhr.setRequestHeader(header, opts.headers[header])\n      })\n\n      xhr.send(data)\n\n      this.uppy.on('upload-cancel', (fileID) => {\n        if (fileID === file.id) {\n          xhr.abort()\n        }\n      })\n\n      this.uppy.on('cancel-all', () => {\n        // const files = this.uppy.getState().files\n        // if (!files[file.id]) return\n        xhr.abort()\n      })\n    })\n  }\n\n  uploadRemote (file, current, total) {\n    const opts = this.getOptions(file)\n    return new Promise((resolve, reject) => {\n      const fields = {}\n      const metaFields = Array.isArray(opts.metaFields)\n        ? opts.metaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta)\n\n      metaFields.forEach((name) => {\n        fields[name] = file.meta[name]\n      })\n\n      fetch(file.remote.url, {\n        method: 'post',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Object.assign({}, file.remote.body, {\n          endpoint: opts.endpoint,\n          size: file.data.size,\n          fieldname: opts.fieldName,\n          fields,\n          headers: opts.headers\n        }))\n      })\n      .then((res) => {\n        if (res.status < 200 && res.status > 300) {\n          return reject(res.statusText)\n        }\n\n        res.json().then((data) => {\n          const token = data.token\n          const host = getSocketHost(file.remote.host)\n          const socket = new UppySocket({ target: `${host}/api/${token}` })\n\n          socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n          socket.on('success', (data) => {\n            this.uppy.emit('upload-success', file.id, data, data.url)\n            socket.close()\n            return resolve()\n          })\n\n          socket.on('error', (errData) => {\n            this.uppy.emit('upload-error', file.id, new Error(errData.error))\n            reject(new Error(errData.error))\n          })\n        })\n      })\n    })\n  }\n\n  uploadFiles (files) {\n    const actions = files.map((file, i) => {\n      const current = parseInt(i, 10) + 1\n      const total = files.length\n\n      if (file.error) {\n        return () => Promise.reject(new Error(file.error))\n      } else if (file.isRemote) {\n        // We emit upload-started here, so that it's also emitted for files\n        // that have to wait due to the `limit` option.\n        this.uppy.emit('upload-started', file.id)\n        return this.uploadRemote.bind(this, file, current, total)\n      } else {\n        this.uppy.emit('upload-started', file.id)\n        return this.upload.bind(this, file, current, total)\n      }\n    })\n\n    const promises = actions.map((action) => {\n      const limitedAction = this.limitUploads(action)\n      return limitedAction()\n    })\n\n    return settle(promises)\n  }\n\n  handleUpload (fileIDs) {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[XHRUpload] No files to upload!')\n      return Promise.resolve()\n    }\n\n    this.uppy.log('[XHRUpload] Uploading...')\n    const files = fileIDs.map(getFile, this)\n    function getFile (fileID) {\n      return this.uppy.state.files[fileID]\n    }\n\n    return this.uploadFiles(files).then(() => null)\n  }\n\n  install () {\n    this.uppy.addUploader(this.handleUpload)\n  }\n\n  uninstall () {\n    this.uppy.removeUploader(this.handleUpload)\n  }\n}\n"]}