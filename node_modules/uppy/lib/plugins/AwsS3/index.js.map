{"version":3,"sources":["../../../src/plugins/AwsS3/index.js"],"names":["Plugin","require","Translator","XHRUpload","module","exports","uppy","opts","type","id","title","defaultLocale","strings","preparingUpload","defaultOptions","timeout","limit","getUploadParameters","bind","locale","translator","i18n","translate","prepareUpload","file","host","Error","filename","encodeURIComponent","name","fetch","method","headers","accept","then","response","json","fileIDs","forEach","emit","mode","message","value","Promise","all","map","getFile","paramsPromise","resolve","params","catch","error","responses","updatedFiles","index","url","fields","xhrOpts","formData","toLowerCase","endpoint","metaFields","Object","keys","updatedFile","meta","xhrUpload","setState","files","getState","install","addPreProcessor","use","fieldName","responseUrlFieldName","getResponseData","xhr","responseXML","location","responseURL","getValue","key","el","querySelector","textContent","bucket","etag","getResponseError","uninstall","uploader","getPlugin","removePlugin","removePreProcessor"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../../core/Plugin')\nconst Translator = require('../../core/Translator')\nconst XHRUpload = require('../XHRUpload')\n\nmodule.exports = class AwsS3 extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = 'AwsS3'\n    this.title = 'AWS S3'\n\n    const defaultLocale = {\n      strings: {\n        preparingUpload: 'Preparing upload...'\n      }\n    }\n\n    const defaultOptions = {\n      timeout: 30 * 1000,\n      limit: 0,\n      getUploadParameters: this.getUploadParameters.bind(this),\n      locale: defaultLocale\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    this.translator = new Translator({ locale: this.locale })\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n  }\n\n  getUploadParameters (file) {\n    if (!this.opts.host) {\n      throw new Error('Expected a `host` option containing an uppy-server address.')\n    }\n\n    const filename = encodeURIComponent(file.name)\n    const type = encodeURIComponent(file.type)\n    return fetch(`${this.opts.host}/s3/params?filename=${filename}&type=${type}`, {\n      method: 'get',\n      headers: { accept: 'application/json' }\n    }).then((response) => response.json())\n  }\n\n  prepareUpload (fileIDs) {\n    fileIDs.forEach((id) => {\n      this.uppy.emit('preprocess-progress', id, {\n        mode: 'determinate',\n        message: this.i18n('preparingUpload'),\n        value: 0\n      })\n    })\n\n    return Promise.all(\n      fileIDs.map((id) => {\n        const file = this.uppy.getFile(id)\n        const paramsPromise = Promise.resolve()\n          .then(() => this.opts.getUploadParameters(file))\n        return paramsPromise.then((params) => {\n          this.uppy.emit('preprocess-progress', file.id, {\n            mode: 'determinate',\n            message: this.i18n('preparingUpload'),\n            value: 1\n          })\n          return params\n        }).catch((error) => {\n          this.uppy.emit('upload-error', file.id, error)\n        })\n      })\n    ).then((responses) => {\n      const updatedFiles = {}\n      fileIDs.forEach((id, index) => {\n        const file = this.uppy.getFile(id)\n        if (file.error) {\n          return\n        }\n\n        const {\n          method = 'post',\n          url,\n          fields,\n          headers\n        } = responses[index]\n        const xhrOpts = {\n          method,\n          formData: method.toLowerCase() === 'post',\n          endpoint: url,\n          metaFields: Object.keys(fields)\n        }\n\n        if (headers) {\n          xhrOpts.headers = headers\n        }\n\n        const updatedFile = Object.assign({}, file, {\n          meta: Object.assign({}, file.meta, fields),\n          xhrUpload: xhrOpts\n        })\n\n        updatedFiles[id] = updatedFile\n      })\n\n      this.uppy.setState({\n        files: Object.assign({}, this.uppy.getState().files, updatedFiles)\n      })\n\n      fileIDs.forEach((id) => {\n        this.uppy.emit('preprocess-complete', id)\n      })\n    })\n  }\n\n  install () {\n    this.uppy.addPreProcessor(this.prepareUpload)\n\n    this.uppy.use(XHRUpload, {\n      fieldName: 'file',\n      responseUrlFieldName: 'location',\n      timeout: this.opts.timeout,\n      limit: this.opts.limit,\n      getResponseData (xhr) {\n        // If no response, we've hopefully done a PUT request to the file\n        // in the bucket on its full URL.\n        if (!xhr.responseXML) {\n          return { location: xhr.responseURL }\n        }\n        function getValue (key) {\n          const el = xhr.responseXML.querySelector(key)\n          return el ? el.textContent : ''\n        }\n        return {\n          location: getValue('Location'),\n          bucket: getValue('Bucket'),\n          key: getValue('Key'),\n          etag: getValue('ETag')\n        }\n      },\n      getResponseError (xhr) {\n        // If no response, we don't have a specific error message, use the default.\n        if (!xhr.responseXML) {\n          return\n        }\n        const error = xhr.responseXML.querySelector('Error > Message')\n        return new Error(error.textContent)\n      }\n    })\n  }\n\n  uninstall () {\n    const uploader = this.uppy.getPlugin('XHRUpload')\n    this.uppy.removePlugin(uploader)\n\n    this.uppy.removePreProcessor(this.prepareUpload)\n  }\n}\n"]}