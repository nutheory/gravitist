'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _wrappedBoomFunction = require('./wrappedBoomFunction');

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Boom = require('boom');

var SevenBoom = function () {
  function SevenBoom() {
    _classCallCheck(this, SevenBoom);
  }

  _createClass(SevenBoom, null, [{
    key: 'init',
    value: function init(argsDef) {
      _init(argsDef);
    }
  }]);

  return SevenBoom;
}();

exports.default = SevenBoom;


function _init(argsDef) {
  var args = _generateArgs(argsDef);
  _lodash2.default.each(_lodash2.default.functions(Boom), function (funcName) {
    SevenBoom[funcName] = _wrappedBoomFunction.getWrappedFunc.apply(undefined, [funcName, Boom[funcName]].concat(_toConsumableArray(args)));
  });
}

function _generateArgs(argsDef) {
  if (!argsDef) return [];
  var sorted = _lodash2.default.sortBy(argsDef, [function (a) {
    return a.order;
  }]);
  replaceDefaults(['timeThrown', 'guid'], argsDef);
  return sorted;
}

function replaceDefaults(argsName, argsDef) {
  _lodash2.default.each(argsName, function (argName) {
    var index = _lodash2.default.findIndex(argsDef, { name: argName });
    var arg = argsDef[index];
    arg = _getDefaultActionForArg(arg);
    // Replace item at index using native splice
    argsDef.splice(index, 1, arg);
  });
  return;
}

var defaultArgsActions = {
  timeThrown: _defaultTimeThrown,
  guid: _defaultGenerateGuid
};
function _getDefaultActionForArg(arg) {
  if (arg && !arg.default) {
    arg.default = defaultArgsActions[arg.name];
  }
  return arg;
}

function _defaultTimeThrown() {
  return new Date().toISOString();
}

function _defaultGenerateGuid() {
  return _uuid2.default.v4();
}